using System;
using System.Collections.Generic;

namespace MergeSort
{
    class MergeSort
    {
        static void Main()
        {
            Console.WriteLine("Enter length of the array:");
            int length;
            do
            {
                Console.Write("Length = ");
            }
            while (!int.TryParse(Console.ReadLine(), out length));

            int[] array = new int[length];

            for (int m = 0; m < length; m++)
            {
                array[m] = int.Parse(Console.ReadLine());
            }

            int[] sortedArray = MergeSortArray(array);

            for (int i = 0; i < sortedArray.Length; i++)
            {
                if (i == sortedArray.Length - 1)
                {
                    Console.Write(sortedArray[i]);
                }
                else
                {
                    Console.Write(sortedArray[i] + ",");
                }
            }
            Console.WriteLine();
        }

        public static int[] MergeSortArray(int[] array)
        {
            if (array.Length == 1)
            {
                return array;
            }

            int middle = array.Length / 2;
            int[] left = new int[middle];

            for (int i = 0; i < middle; i++)
            {
                left[i] = array[i];
            }
            int[] right = new int[array.Length - middle];
            for (int i = 0; i < array.Length - middle; i++)
            {
                right[i] = array[i + middle];
            }
            left = MergeSortArray(left);
            right = MergeSortArray(right);

            int leftptr = 0;
            int rightptr = 0;

            int[] sorted = new int[array.Length];

            for (int k = 0; k < array.Length; k++)
            {
                if (rightptr == right.Length || ((leftptr < left.Length) && (left[leftptr] <= right[rightptr])))
                {
                    sorted[k] = left[leftptr];
                    leftptr++;
                }
                else if (leftptr == left.Length || ((rightptr < right.Length) && (right[rightptr] <= left[leftptr])))
                {
                    sorted[k] = right[rightptr];
                    rightptr++;
                }
            }
            return sorted;
        }
    }
}
